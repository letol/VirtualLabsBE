###
# Login with admin
POST http://localhost:8080/auth/login
Content-Type: application/json

{
  "username": "admin",
  "password": "admin"
}

> {%
    if (response.status === 200) {
        client.global.set("auth_token_admin", response.body.token);
    }
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
 %}

###
# Add teacher 'd111111'
POST http://localhost:8080/API/teachers/
Content-Type: application/json
Authorization: Bearer {{auth_token_admin}}

{
  "id": "d111111",
  "lastName": "Malnati",
  "firstName": "Giovanni",
  "email": "d111111@polito.it"
}
> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
# Register teacher 'd111111'
POST http://localhost:8080/auth/register
Content-Type: application/json

{
  "id": "d111111",
  "lastName": "Malnati",
  "firstName": "Giovanni",
  "password": "pd1",
  "email": "d111111@polito.it"
}
> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
# Add teacher 'd222222'
POST http://localhost:8080/API/teachers/
Content-Type: application/json
Authorization: Bearer {{auth_token_admin}}

{
  "id": "d222222",
  "lastName": "Servetti",
  "firstName": "Antonio",
  "email": "d222222@polito.it"
}
> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
# Register teacher 'd222222'
POST http://localhost:8080/auth/register
Content-Type: application/json

{
  "id": "d222222",
  "lastName": "Servetti",
  "firstName": "Antonio",
  "password": "pd2",
  "email": "d222222@polito.it"
}
> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
# Add student 's111111'
POST http://localhost:8080/API/students/
Content-Type: application/json
Authorization: Bearer {{auth_token_admin}}

{
  "id": "s111111",
  "lastName": "Rossi",
  "firstName": "Mario",
  "email": "s111111@studenti.polito.it"
}
> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
# Register student 's111111'
POST http://localhost:8080/auth/register
Content-Type: application/json

{
  "id": "s111111",
  "lastName": "Rossi",
  "firstName": "Mario",
  "password": "ps1",
  "email": "s111111@studenti.polito.it"
}
> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
# Add student 's222222'
POST http://localhost:8080/API/students/
Content-Type: application/json
Authorization: Bearer {{auth_token_admin}}

{
  "id": "s222222",
  "lastName": "Bianchi",
  "firstName": "Giulio",
  "email": "s222222@studenti.polito.it"
}
> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
# Register student 's222222'
POST http://localhost:8080/auth/register
Content-Type: application/json

{
  "id": "s222222",
  "lastName": "Bianchi",
  "firstName": "Giulio",
  "password": "ps2",
  "email": "s222222@studenti.polito.it"
}
> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
# Add student 's333333'
POST http://localhost:8080/API/students/
Content-Type: application/json
Authorization: Bearer {{auth_token_admin}}

{
  "id": "s333333",
  "lastName": "Verdi",
  "firstName": "Giuseppe",
  "email": "s333333@studenti.polito.it"
}
> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
# Register student 's333333'
POST http://localhost:8080/auth/register
Content-Type: application/json

{
  "id": "s333333",
  "lastName": "Verdi",
  "firstName": "Giuseppe",
  "password": "ps3",
  "email": "s333333@studenti.polito.it"
}
> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
# Add student 's444444'
POST http://localhost:8080/API/students/
Content-Type: application/json
Authorization: Bearer {{auth_token_admin}}

{
  "id": "s444444",
  "lastName": "Bruni",
  "firstName": "Giorgio",
  "email": "s444444@studenti.polito.it"
}
> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
# Register student 's444444'
POST http://localhost:8080/auth/register
Content-Type: application/json

{
  "id": "s444444",
  "lastName": "Bruni",
  "firstName": "Giorgio",
  "password": "ps4",
  "email": "s444444@studenti.polito.it"
}
> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
# Login with teacher1
POST http://localhost:8080/auth/login
Content-Type: application/json

{
  "username": "d111111",
  "password": "pd1"
}


> {%
    if (response.status === 200) {
        client.global.set("auth_token_teacher1", response.body.token);
    }
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
 %}

###
# Add course 'c1'
# Hint: should be done by teacher1
POST http://localhost:8080/API/courses/
Content-Type: application/json
Authorization: Bearer {{auth_token_teacher1}}

{
  "acronym": "c1",
  "name": "corso di pino",
  "min": 2,
  "max": 4,
  "vcpu": 5,
  "disk": 10,
  "memory": 15,
  "maxVmInstance": 3,
  "maxRunningVmInstance": 1
}
> {%
    if (response.status === 200) {
        client.global.set("c1_id", response.body.id);
    }
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
# Add course 'c2'
# Hint: should be done by teacher1
POST http://localhost:8080/API/courses/
Content-Type: application/json
Authorization: Bearer {{auth_token_teacher1}}

{
  "acronym": "c2",
  "name": "corso di alex",
  "min": 1,
  "max": 2,
  "vcpu": 5,
  "disk": 10,
  "memory": 15,
  "maxVmInstance": 3,
  "maxRunningVmInstance": 1
}
> {%
    if (response.status === 200) {
        client.global.set("c2_id", response.body.id);
    }
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
# Add course 'c3'
# Hint: should be done by teacher1
POST http://localhost:8080/API/courses/
Content-Type: application/json
Authorization: Bearer {{auth_token_teacher1}}

{
  "acronym": "c3",
  "name": "corso di leo",
  "min": 2,
  "max": 4,
  "vcpu": 5,
  "disk": 10,
  "memory": 15,
  "maxVmInstance": 3,
  "maxRunningVmInstance": 1
}
> {%
    if (response.status === 200) {
        client.global.set("c3_id", response.body.id);
    }
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
# Add and enroll to 'c3' students from CSV
POST http://localhost:8080/API/courses/{{c3_id}}/enrollMany
Content-Type: multipart/form-data; boundary=WebAppBoundary
Authorization: Bearer {{auth_token_teacher1}}

--WebAppBoundary
Content-Disposition: form-data; name="file"; filename="test.csv"

< test.csv
--WebAppBoundary--

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
# Login with teacher2
POST http://localhost:8080/auth/login
Content-Type: application/json

{
  "username": "d222222",
  "password": "pd2"
}

> {%
    if (response.status === 200) {
        client.global.set("auth_token_teacher2", response.body.token);
    }
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
 %}

###
# Add course 'c4'
# Hint: should be done by teacher2
POST http://localhost:8080/API/courses/
Content-Type: application/json
Authorization: Bearer {{auth_token_teacher2}}

{
  "acronym": "c4",
  "name": "corso di pino",
  "min": 3,
  "max": 5,
  "vcpu": 5,
  "disk": 10,
  "memory": 15,
  "maxVmInstance": 3,
  "maxRunningVmInstance": 1
}
> {%
    if (response.status === 200) {
        client.global.set("c4_id", response.body.id);
    }
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
# Enable course 'c4'
GET http://localhost:8080/API/courses/{{c4_id}}/enableCourse
Authorization: Bearer {{auth_token_teacher2}}

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
# Add teacher1 to course 'c4'
PUT http://localhost:8080/API/courses/{{c4_id}}/addTeacher
Content-Type: multipart/form-data; boundary=WebAppBoundary
Authorization: Bearer {{auth_token_teacher2}}

--WebAppBoundary
Content-Disposition: form-data; name="teacherId"

d111111
--WebAppBoundary--

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
# Enroll student 's222222' to 'c4'
POST http://localhost:8080/API/courses/{{c4_id}}/enrollOne
Content-Type: multipart/form-data; boundary=WebAppBoundary
Authorization: Bearer {{auth_token_teacher2}}

--WebAppBoundary
Content-Disposition: form-data; name="studentId"

s222222
--WebAppBoundary--

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
# Enroll student 's444444' to 'c4'
POST http://localhost:8080/API/courses/{{c4_id}}/enrollOne
Content-Type: multipart/form-data; boundary=WebAppBoundary
Authorization: Bearer {{auth_token_teacher2}}

--WebAppBoundary
Content-Disposition: form-data; name="studentId"

s444444
--WebAppBoundary--

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
# Add assignment to course 'c4'
# expiryDate is in UTC with format: "yyyy-mm-ddThh:mm:ss.SSSZ"
# where S are millisecnonds and Z is ISO 8601 time zone
POST http://localhost:8080/API/courses/{{c4_id}}/assignment
Content-Type: multipart/form-data; boundary=WebAppBoundary
Authorization: Bearer {{auth_token_teacher2}}

--WebAppBoundary
Content-Disposition: form-data; name="name"

assignment1
--WebAppBoundary
Content-Disposition: form-data; name="expiryDate"

1615726799000
--WebAppBoundary
Content-Disposition: form-data; name="content"; filename="assignment1.txt"
Content-Type: application/txt

< lipsum.txt
--WebAppBoundary

> {%
    if (response.status === 200) {
        client.global.set("assignmentId1", response.body.id);
    }
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
# Add assignment to course 'c4'
# expiryDate is in UTC with format: "yyyy-mm-ddThh:mm:ss.SSSZ"
# where S are millisecnonds and Z is ISO 8601 time zone
POST http://localhost:8080/API/courses/{{c4_id}}/assignment
Content-Type: multipart/form-data; boundary=WebAppBoundary
Authorization: Bearer {{auth_token_teacher2}}


--WebAppBoundary
Content-Disposition: form-data; name="name"

assignment2
--WebAppBoundary
Content-Disposition: form-data; name="expiryDate"

1615726799000
--WebAppBoundary
Content-Disposition: form-data; name="content"; filename="assignment2.pdf"
Content-Type: application/pdf

< lipsum.pdf
--WebAppBoundary

> {%
    if (response.status === 200) {
        client.global.set("assignmentId2", response.body.id);
    }
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
# Add assignment to course 'c4'
# expiryDate is in UTC with format: "yyyy-mm-ddThh:mm:ss.SSSZ"
# where S are millisecnonds and Z is ISO 8601 time zone
POST http://localhost:8080/API/courses/{{c4_id}}/assignment
Content-Type: multipart/form-data; boundary=WebAppBoundary
Authorization: Bearer {{auth_token_teacher2}}


--WebAppBoundary
Content-Disposition: form-data; name="name"

assignment3
--WebAppBoundary
Content-Disposition: form-data; name="expiryDate"

1615726799000
--WebAppBoundary
Content-Disposition: form-data; name="content"; filename="assignment3.png"
Content-Type: image/png

< lipsum.png
--WebAppBoundary

> {%
    if (response.status === 200) {
        client.global.set("assignmentId3", response.body.id);
    }
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
# Login with student2
POST http://localhost:8080/auth/login
Content-Type: application/json

{
  "username": "s222222",
  "password": "ps2"
}

> {%
    if (response.status === 200) {
        client.global.set("auth_token_student2", response.body.token);
    }
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
 %}

###
# Submit version for homework of 's222222' of 'assignment1' of 'c4'
POST http://localhost:8080/API/courses/{{c4_id}}/assignment/{{assignmentId1}}/homework/s222222/submit
Content-Type: multipart/form-data; boundary=WebAppBoundary
Authorization: Bearer {{auth_token_student2}}

--WebAppBoundary
Content-Disposition: form-data; name="content"; filename="s222222_assignment1_submitted.txt"
Content-Type: application/txt

< lipsum.txt
--WebAppBoundary

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
# Submit version for homework of 's222222' of 'assignment2' of 'c4'
POST http://localhost:8080/API/courses/{{c4_id}}/assignment/{{assignmentId2}}/homework/s222222/submit
Content-Type: multipart/form-data; boundary=WebAppBoundary
Authorization: Bearer {{auth_token_student2}}

--WebAppBoundary
Content-Disposition: form-data; name="content"; filename="s222222_assignment2_submitted.pdf"
Content-Type: application/pdf

< lipsum.pdf
--WebAppBoundary

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
# Student 's222222' reads 'assignment3' of 'c4'
GET http://localhost:8080/API/courses/{{c4_id}}/assignment/{{assignmentId3}}/content
Authorization: Bearer {{auth_token_student2}}

###
# Login with student4
POST http://localhost:8080/auth/login
Content-Type: application/json

{
  "username": "s444444",
  "password": "ps4"
}

> {%
    if (response.status === 200) {
        client.global.set("auth_token_student4", response.body.token);
    }
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
 %}

###
# Submit version for homework of 's444444' of 'assignment1' of 'c4'
POST http://localhost:8080/API/courses/{{c4_id}}/assignment/{{assignmentId1}}/homework/s444444/submit
Content-Type: multipart/form-data; boundary=WebAppBoundary
Authorization: Bearer {{auth_token_student4}}

--WebAppBoundary
Content-Disposition: form-data; name="content"; filename="s444444_assignment1_submitted.txt"
Content-Type: application/txt

< lipsum.txt
--WebAppBoundary

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
# Submit version for homework of 's444444' of 'assignment2' of 'c4'
POST http://localhost:8080/API/courses/{{c4_id}}/assignment/{{assignmentId2}}/homework/s444444/submit
Content-Type: multipart/form-data; boundary=WebAppBoundary
Authorization: Bearer {{auth_token_student4}}

--WebAppBoundary
Content-Disposition: form-data; name="content"; filename="s444444_assignment2_submitted.pdf"
Content-Type: application/pdf

< lipsum.pdf
--WebAppBoundary

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
# Submit review for homework of 's222222' of 'assignment1' of 'c4'
# Student can't submit another version
POST http://localhost:8080/API/courses/{{c4_id}}/assignment/{{assignmentId1}}/homework/s222222/review?canReSubmit=false
Content-Type: multipart/form-data; boundary=WebAppBoundary
Authorization: Bearer {{auth_token_teacher2}}

--WebAppBoundary
Content-Disposition: form-data; name="content"; filename="s222222_assignment1_definitely_reviewed.txt"
Content-Type: application/txt

< lipsum.txt
--WebAppBoundary

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
# Submit review for homework of 's444444' of 'assignment1' of 'c4'
# Student can't submit another version
POST http://localhost:8080/API/courses/{{c4_id}}/assignment/{{assignmentId1}}/homework/s444444/review?canReSubmit=false
Content-Type: multipart/form-data; boundary=WebAppBoundary
Authorization: Bearer {{auth_token_teacher2}}

--WebAppBoundary
Content-Disposition: form-data; name="content"; filename="s444444_assignment1_definitely_reviewed.txt"
Content-Type: application/txt

< lipsum.txt
--WebAppBoundary

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
# Submit review for homework of 's222222' of 'assignment2' of 'c4'
# Student can submit another version
POST http://localhost:8080/API/courses/{{c4_id}}/assignment/{{assignmentId2}}/homework/s222222/review?canReSubmit=true
Content-Type: multipart/form-data; boundary=WebAppBoundary
Authorization: Bearer {{auth_token_teacher2}}

--WebAppBoundary
Content-Disposition: form-data; name="content"; filename="s222222_assignment2_reviewed.pdf"
Content-Type: application/pdf

< lipsum.pdf
--WebAppBoundary

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
# Set score for homework of 's222222' of 'assignment1' of 'c4'
POST http://localhost:8080/API/courses/{{c4_id}}/assignment/{{assignmentId1}}/homework/s222222/setScore
Content-Type: multipart/form-data; boundary=WebAppBoundary
Authorization: Bearer {{auth_token_teacher2}}

--WebAppBoundary
Content-Disposition: form-data; name="score"

30
--WebAppBoundary--

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}
