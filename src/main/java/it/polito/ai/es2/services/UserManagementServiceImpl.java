package it.polito.ai.es2.services;

import it.polito.ai.es2.dtos.StudentDTO;
import it.polito.ai.es2.dtos.UserDTO;
import it.polito.ai.es2.entities.Teacher;
import it.polito.ai.es2.entities.User;
import it.polito.ai.es2.repositories.UserRepository;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class UserManagementServiceImpl implements UserManagementService {

    @Autowired
    UserRepository userRepo;

    @Autowired
    ModelMapper modelMapper;

    @Autowired
    PasswordEncoder passwordEncoder;

    @Override
    @PreAuthorize("hasRole('ROLE_ADMIN')")
    public User addUser(User user) {
        return userRepo.save(user);
    }

    @Override
    @PreAuthorize("hasRole('ROLE_TEACHER') or hasRole('ROLE_ADMIN')")
    public User addUser(StudentDTO studentDTO) {
        return userRepo.save(User.builder()
                .username(studentDTO.getId())
                .password(passwordEncoder.encode("password"))   //TODO: Change to autogenerated temporary pwd (sent by email) before production
                .roles(Collections.singletonList("ROLE_STUDENT"))
                .build()
        );
    }

    @Override
    @PreAuthorize("hasRole('ROLE_ADMIN')")
    public User addUser(Teacher teacher) {
        return userRepo.save(User.builder()
                .username(teacher.getId())
                .password(passwordEncoder.encode("password"))  //TODO: Change to autogenerated temporary pwd (sent by email) before production
                .roles(Collections.singletonList("ROLE_TEACHER"))
                .build()
        );
    }

    @Override
    @PreAuthorize("hasRole('ROLE_ADMIN')")
    public Optional<UserDTO> getUser(Long userId) {
        return userRepo.findById(userId).map(u -> modelMapper.map(u, UserDTO.class));
    }

    @Override
    @PreAuthorize("hasRole('ROLE_ADMIN')")
    public Optional<UserDTO> getUser(String username) {
        return userRepo.findByUsername(username).map(u -> modelMapper.map(u, UserDTO.class));
    }

    @Override
    @PreAuthorize("hasRole('ROLE_ADMIN')")
    public List<UserDTO> getAllUsers() {
        return userRepo.findAll()
                .stream()
                .map(u -> modelMapper.map(u, UserDTO.class))
                .collect(Collectors.toList());
    }

    @Override
    @PreAuthorize("hasRole('ROLE_ADMIN')")
    public void removeUser(Long userId) {
        userRepo.delete(userRepo.findById(userId)
                .orElseThrow(() -> new UsernameNotFoundException("User with id '" + userId + "' not found!")));
    }

    @Override
    @PreAuthorize("hasRole('ROLE_ADMIN')")
    public void removeUser(String username) {
        userRepo.delete(userRepo.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("Username '" + username + "' not found!")));
    }

    @Override
    @PreAuthorize("hasRole('ROLE_ADMIN')")
    public void changePassword(Long userId, String newPassword) {
        userRepo.findById(userId)
                .orElseThrow(() -> new UsernameNotFoundException("User with id '" + userId + "' not found!"))
                .setPassword(passwordEncoder.encode(newPassword));
    }

    @Override
    @PreAuthorize("#username == authentication.principal.username")
    public void changePassword(String username, String newPassword) {
        userRepo.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("Username '" + username + "' not found!"))
                .setPassword(passwordEncoder.encode(newPassword));
    }
}
